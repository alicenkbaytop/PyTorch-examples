# -*- coding: utf-8 -*-
"""pytorch_cnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WKi-jixpoKKE2YVrTNtsUU2jZ5iZJ2ew

## Imports
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torch.utils.data import DataLoader
import torchvision
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from tqdm import tqdm

"""## Create CNN"""

class CNN(torch.nn.Module):
  def __init__(self, in_channels=1, num_classes=10):
    super(CNN, self).__init__()
    self.conv1 = nn.Conv2d(in_channels=in_channels, out_channels=8, kernel_size=(3,3), stride=(1,1), padding=(1,1))
    self.pool = nn.MaxPool2d(kernel_size=(2,2), stride=(2,2))
    self.conv2 = nn.Conv2d(in_channels=8, out_channels=16, kernel_size=(3,3), stride=(1,1), padding=(1,1))
    self.fc1 = nn.Linear(16*7*7, num_classes)

  def forward(self, x):
    x = F.relu(self.conv1(x))
    x = self.pool(x)
    x = F.relu(self.conv2(x))
    x = self.pool(x)
    x = x.reshape(x.shape[0], -1)
    x = self.fc1(x)
    return x

"""## Set Device"""

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(device)

"""## Hyperparameters"""

in_channels = 1
num_classes = 10
learning_rate = 0.001
batch_size = 64
num_epochs = 3

"""## Data Load"""

train_dataset = datasets.MNIST(root="datasets/", train=True, transform=transforms.ToTensor(), download=True)
train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)

test_dataset = datasets.MNIST(root="datasets/", train=False, transform=transforms.ToTensor(), download=True)
test_loader = DataLoader(dataset=test_dataset, batch_size=batch_size, shuffle=True)

"""## Initialize Model"""

model = CNN(in_channels=in_channels, num_classes=num_classes).to(device)

"""## Loss and Optimizer"""

criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=learning_rate)

"""## Train CNN"""

model.train()
for epoch in range(num_epochs):
  print(f"Number of Epochs: {epoch}")
  for batch_idx, (data, targets) in enumerate(train_loader):
    
    data = data.to(device=device)
    targets = targets.to(device=device)

    #data = data.reshape(data.shape[0], -1)

    scores = model(data)
    loss = criterion(scores, targets)

    optimizer.zero_grad()
    loss.backward()

    optimizer.step()

"""## Checking Accuracy"""

model.eval()
def check_accuracy(loader, model):
  num_correct = 0
  num_samples = 0

  with torch.no_grad():
    for x, y in loader:
      x = x.to(device=device)
      y = y.to(device=device)

      scores = model(x)
      _, predictions = scores.max(1)
      num_correct += (predictions == y).sum()
      num_samples += predictions.size(0)

  return num_correct / num_samples

print(f"Accuracy on training set: {check_accuracy(train_loader, model)*100:.2f}")
print(f"Accuracy on test set: {check_accuracy(test_loader, model)*100:.2f}")