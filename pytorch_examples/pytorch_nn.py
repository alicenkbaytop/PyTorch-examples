# -*- coding: utf-8 -*-
"""pytorch_nn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KwPdWGTv94XxtZP5LXpAsy9n3FwXC6F8

## Imports
"""

import torch
import torch.nn as nn # All neural network modules, nn.Linear, nn.Conv2d, BatchNorm, Loss functions
import torch.optim as optim # For all Optimization algorithms, SGD, Adam, etc.
import torch.nn.functional as F # All functions that don't have any parameters
from torch.utils.data import DataLoader # Gives easier dataset managment and creates mini batches
import torchvision.datasets as datasets # Has standard datasets we can import in a nice and easy way
import torchvision.transforms as transforms # Transformations we can perform on our dataset

"""## Load Data"""

batch_size = 64

train_dataset = datasets.MNIST(root="dataset/", train=True, transform=transforms.ToTensor(), download=True)
train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)

test_dataset = datasets.MNIST(root="dataset/", train=False, transform=transforms.ToTensor(), download=True)
test_loader = DataLoader(dataset=test_dataset, batch_size=batch_size, shuffle=True)

"""## Create Fully Connected Layer"""

class NN(torch.nn.Module):
  def __init__(self, input_size, num_classes):
    super(NN, self).__init__()
    self.fc1 = nn.Linear(input_size, 50)
    self.fc2 = nn.Linear(50, num_classes)

  def forward(self, x):
    x = F.relu(self.fc1(x))
    x = self.fc2(x)
    return x

"""## Set Device"""

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(device)

"""## Hyperparameters"""

input_size = 784 # 28*28 grayscale mnist
num_classes = 10 # 0,1,2,3,4,5,6,7,8,9
learning_rate = 0.001
num_epochs = 3

"""## Initialize Network"""

model = NN(input_size=input_size, num_classes=num_classes).to(device)

"""## Loss and Optimizer"""

criterion = nn.CrossEntropyLoss() # did not apply softmax in nn part becauese in crossentropyloss there is softmax
optimizer = optim.Adam(model.parameters(), lr=learning_rate)

"""## Train Network"""

model.train()

for epoch in range(num_epochs):
  print(f"Epoch: {epoch}")
  for batch_idx, (data, targets) in enumerate(train_loader):
    #print(f"batch idx: {batch_idx}")

    # Get data to cuda if possible
    data = data.to(device=device)
    targets = targets.to(device=device)

    # Get to correct shape, 28x28->784
    # -1 will flatten all outer dimensions into one
    data = data.reshape(data.shape[0], -1)

    # forward propagation
    scores = model(data)
    loss = criterion(scores, targets)

    # zero previous gradients
    optimizer.zero_grad

    # back-propagation
    loss.backward()

    # gradient descent or adam step
    optimizer.step()

"""## Checking Accuracy"""

model.eval()

def check_accuracy(loader, model):
    num_correct = 0
    num_samples = 0

    with torch.no_grad():
        for x, y in loader:
            x = x.to(device=device)
            y = y.to(device=device)
            x = x.reshape(x.shape[0], -1)

            scores = model(x)
            _, predictions = scores.max(1)
            num_correct += (predictions == y).sum()
            num_samples += predictions.size(0)

    model.train()
    return num_correct/num_samples


print(f"Accuracy on training set: {check_accuracy(train_loader, model)*100:.2f}")
print(f"Accuracy on test set: {check_accuracy(test_loader, model)*100:.2f}")

